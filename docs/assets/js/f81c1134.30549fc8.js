"use strict";(self.webpackChunkhoclamdev=self.webpackChunkhoclamdev||[]).push([[130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/tags/100-days-leetcode","metadata":{"permalink":"/blog/tags/100-days-leetcode","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/tags/100-days-leetcode.md","source":"@site/blog/tags/100-days-leetcode.md","title":"100 Days Leetcode","description":"100 Days LeetCode","date":"2025-09-28T16:23:52.000Z","tags":[{"inline":false,"label":"100 Days LeetCode","permalink":"/blog/tags/100-days-leetcode","description":"100 Days LeetCode Challenge"}],"readingTime":0.02,"hasTruncateMarker":false,"authors":[{"name":"Hieu Nguyen","title":"Senior Software Engineer","url":"https://linkedin.com/in/nokanguyen","page":{"permalink":"/blog/authors/noka"},"socials":{"linkedin":"https://www.linkedin.com/in/nokanguyen/","github":"https://github.com/nokavietnam"},"imageURL":"https://raw.githubusercontent.com/nokavietnam/nokaresources/3583806b6cc81ed98509570576cf78665570f5bb/avatar-noka.jpg","key":"noka"}],"frontMatter":{"slug":"/tags/100-days-leetcode","title":"100 Days Leetcode","authors":["noka"],"tags":["100-days-leetcode"]},"unlisted":false,"nextItem":{"title":"100 Days Leetcode - Day 1","permalink":"/blog/100-days-leetcode-day-1"}},"content":"## 100 Days LeetCode"},{"id":"100-days-leetcode-day-1","metadata":{"permalink":"/blog/100-days-leetcode-day-1","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-09-28-100-days-leetcode-day-1/index.md","source":"@site/blog/2025-09-28-100-days-leetcode-day-1/index.md","title":"100 Days Leetcode - Day 1","description":"Day 1 - Contains Duplicate","date":"2025-09-28T00:00:00.000Z","tags":[{"inline":true,"label":"leetcode","permalink":"/blog/tags/leetcode"},{"inline":true,"label":"dsa","permalink":"/blog/tags/dsa"},{"inline":false,"label":"100 Days LeetCode","permalink":"/blog/tags/100-days-leetcode","description":"100 Days LeetCode Challenge"}],"readingTime":1.29,"hasTruncateMarker":false,"authors":[{"name":"Hieu Nguyen","title":"Senior Software Engineer","url":"https://linkedin.com/in/nokanguyen","page":{"permalink":"/blog/authors/noka"},"socials":{"linkedin":"https://www.linkedin.com/in/nokanguyen/","github":"https://github.com/nokavietnam"},"imageURL":"https://raw.githubusercontent.com/nokavietnam/nokaresources/3583806b6cc81ed98509570576cf78665570f5bb/avatar-noka.jpg","key":"noka"}],"frontMatter":{"slug":"100-days-leetcode-day-1","title":"100 Days Leetcode - Day 1","authors":["noka"],"tags":["leetcode","dsa","100-days-leetcode"]},"unlisted":false,"prevItem":{"title":"100 Days Leetcode","permalink":"/blog/tags/100-days-leetcode"}},"content":"## Day 1 - Contains Duplicate\\n\\n### Description\\n\\nGiven an integer array `nums`, return true if any value appears at least twice in the array, and return false if every element is distinct.\\n\\n```\\n\\nExample 1:\\n\\ninput: nums = [1, 2, 3, 1]\\noutput: false\\n\\nExample 2:\\n\\ninput: nums = [1, 2, 3, 4]\\noutput: false\\n\\nExample 3:\\n\\ninput: nums = [1, 1, 1, 3, 3, 4, 3, 2 , 4, 2]\\noutput: true\\n\\nConstraints:\\n\\n1 <= nums.length <= 10^5\\n-10^9 <= nums[i] <= 10^9\\n\\n```\\n\\n### Solution\\n\\n#### Approach 1 - Sorting\\n\\nStep 1: We will sort the array `nums`. If two numbers are the same, they will be placed next to each other.\\nStep 2: We just need to check whether the two adjacent numbers are equal or not.\\n\\n```Java\\nclass Solution {\\n  public boolean containsDuplicate(int[] nums) {\\n    Arrays.sort(nums);\\n\\n    for (int i = 0; i < nums.length; ++i) {\\n      if (nums[i] == nums[i - 1]) {\\n        return true;\\n      }\\n    }\\n\\n    return false;\\n  }\\n}\\n```\\n\\nComplexity:\\n\\n```\\nTime\\n\\nsort => Dual-Pivot Quicksort O(n log n)\\nfor => O(n)\\n`Result`: O(n log n + n) = O(n log n)\\n\\nSpace\\n\\nO(1)\\n```\\n\\n#### Approach 2 - HashSet\\n\\nWe create a `Set` and add each element of the `nums` array into the set.\\nIf the insertion fails, it means the element is duplicated, and we return true.\\nOtherwise, if we finish checking the entire array without any failure, it means the array has no duplicated.\\n\\n```Java\\nclass Solution {\\n  public boolean containsDuplicate(int[] nums) {\\n    Set<Integer> setNums = new HashSet<>();\\n    for (int num : nums) {\\n      if (!setNums.add(nums)) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n}\\n```\\n\\n```\\n\\nComplexity\\n\\nTime\\n\\nfor => O(n)\\n\\nSpace\\n\\nSet => O(n)\\n```\\n\\nThank for reading!"}]}}')}}]);